// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          Role      @default(FAMILY)
  isActive      Boolean   @default(true)
  
  // Profile information
  phone         String?
  timezone      String?   @default("Asia/Kolkata")
  dateOfBirth   DateTime?
  emergencyContact String?
  
  // Preferences
  notificationPreferences Json?
  privacySettings        Json?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  medications   Medication[]
  familyMembers FamilyMember[]
  
  // Medical records (if user is senior)
  medicationLogs MedicationLog[]
  emergencyAlerts EmergencyAlert[]
  
  // Family members for this senior user
  familyMembersAsSenior FamilyMember[] @relation("SeniorFamilyMembers")


  @@map("users")
}
enum Role {
  ADMIN       // System administrator - full access
  SENIOR      // Primary user taking medications
  CAREGIVER   // Professional caregiver - can manage medications
  FAMILY      // Family member - view access and notifications
  DOCTOR      // Healthcare provider - view reports
}

model Medication {
  id          String   @id @default(cuid())
  name        String
  dosage      String
  description String?
  photoUrl    String?
  color       String?
  shape       String?
  frequency   String // "daily", "twice_daily", "weekly", etc.
  times       String   // "08:00,20:00" - comma separated times
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  emergencyAlerts EmergencyAlert[]

  // Relationships
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicationLogs  MedicationLog[]
  reminders       Reminder[]

  @@map("medications")
}

model MedicationLog {
  id           String    @id @default(cuid())
  takenAt      DateTime?
  scheduledFor DateTime
  status       LogStatus @default(PENDING)
  notes        String?
  createdAt    DateTime  @default(now())

  // Only keep medication relationship, remove user for now
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("medication_logs")
}

model Reminder {
  id           String        @id @default(cuid())
  scheduledFor DateTime
  type         ReminderType  @default(NOTIFICATION)
  status       ReminderStatus @default(PENDING)
  message      String?
  createdAt    DateTime      @default(now())

  // Relationships
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Caregiver {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  caregiverId String
  patientId   String
  caregiver   User   @relation("CaregiverPatients", fields: [caregiverId], references: [id], onDelete: Cascade)
  patient     User   @relation("SeniorCaregivers", fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([caregiverId, patientId])
  @@map("caregivers")
}

model FamilyMember {
  id                      String   @id @default(cuid())
  name                    String
  email                   String   @unique
  phone                   String?
  relationship            String
  role                    String   // primary, secondary, observer
  timezone                String   @default("Asia/Kolkata")
  isEmergencyContact      Boolean  @default(false)
  notificationPreferences String   // JSON string
  
  // Link to actual user account (optional)
  userId                  String?
  user                    User?    @relation(fields: [userId], references: [id])
  
  // Link to senior user
  seniorId                String?
  senior                  User?    @relation("SeniorFamilyMembers", fields: [seniorId], references: [id])
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("family_members")
}

model EmergencyAlert {
  id              String      @id @default(cuid())
  medicationId    String
  medicationName  String
  alertType       String      @default("missed_dose")
  severity        String      @default("medium")
  message         String
  escalationLevel Int         @default(1)
  status          String      @default("active")
  resolvedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Add this relation field if it's missing
  medication      Medication  @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("emergency_alerts")
}



model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


enum UserRole {
  SENIOR
  CAREGIVER
  ADMIN
}

enum LogStatus {
  PENDING
  TAKEN
  MISSED
  SKIPPED
}

enum ReminderType {
  NOTIFICATION
  EMAIL
  SMS
}

enum ReminderStatus {
  PENDING
  SENT
  ACKNOWLEDGED
}
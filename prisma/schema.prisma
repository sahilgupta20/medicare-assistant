generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(FAMILY)
  isActive      Boolean   @default(true)

  // Profile information
  phone            String?
  timezone         String?   @default("Asia/Kolkata")
  dateOfBirth      DateTime?
  emergencyContact String?

  // Preferences
  notificationPreferences Json?
  privacySettings         Json?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  accounts      Account[]
  sessions      Session[]
  medications   Medication[]
  familyMembers FamilyMember[]


  medicationLogs  MedicationLog[]
  emergencyAlerts EmergencyAlert[]


  familyMembersAsSenior FamilyMember[] @relation("SeniorFamilyMembers")



  @@map("users")
}

enum Role {
  ADMIN 
  SENIOR 
  CAREGIVER 
  FAMILY 
  DOCTOR 
}

model Medication {
  id          String    @id @default(cuid())
  name        String
  dosage      String
  description String?
  photoUrl    String?
  color       String?
  shape       String?
  frequency   String 
  times       String 
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicationLogs  MedicationLog[]
  reminders       Reminder[]
  emergencyAlerts EmergencyAlert[]

  @@map("medications")
}

model MedicationLog {
  id           String    @id @default(cuid())
  takenAt      DateTime?
  scheduledFor DateTime
  status       LogStatus @default(PENDING)
  notes        String?
  createdAt    DateTime  @default(now())

  // Relationships
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  // Make user relation optional
  userId String? // Make optional with ?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medication_logs")
}

model Reminder {
  id           String         @id @default(cuid())
  scheduledFor DateTime
  type         ReminderType   @default(NOTIFICATION)
  status       ReminderStatus @default(PENDING)
  message      String?
  createdAt    DateTime       @default(now())

  // Relationships
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Caregiver {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Simplified relationships - just store IDs for now
  caregiverId String
  patientId   String

  @@unique([caregiverId, patientId])
  @@map("caregivers")
}

model FamilyMember {
  id                      String  @id @default(cuid())
  name                    String
  email                   String  @unique
  phone                   String?
  relationship            String
  role                    String // primary, secondary, observer
  timezone                String  @default("Asia/Kolkata")
  isEmergencyContact      Boolean @default(false)
  notificationPreferences String 


  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Link to senior user
  seniorId String?
  senior   User?   @relation("SeniorFamilyMembers", fields: [seniorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("family_members")
}

model EmergencyAlert {
  id              String      @id @default(cuid())
  medicationId    String
  medicationName  String?     
  alertType       String      @default("missed_dose")
  severity        String      @default("medium")
  message         String
  escalationLevel Int         @default(1)
  status          String      @default("active")
  resolvedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @default(now())

  // Relations
  medication      Medication  @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  userId          String?
  user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_alerts")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Removed @db.Text for SQLite compatibility
  access_token      String? // Removed @db.Text for SQLite compatibility
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // Removed @db.Text for SQLite compatibility
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Remove duplicate UserRole enum 
enum LogStatus {
  PENDING
  TAKEN
  MISSED
  SKIPPED
}

enum ReminderType {
  NOTIFICATION
  EMAIL
  SMS
}

enum ReminderStatus {
  PENDING
  SENT
  ACKNOWLEDGED
}

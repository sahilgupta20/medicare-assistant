// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  role      UserRole @default(SENIOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  familyMembers   FamilyMember[] @relation("FamilyMembers")

  // Relationships - remove medicationLogs for now
  medications     Medication[]
  caregivers      Caregiver[] @relation("SeniorCaregivers")
  patients        Caregiver[] @relation("CaregiverPatients")

  @@map("users")
}

model Medication {
  id          String   @id @default(cuid())
  name        String
  dosage      String
  description String?
  photoUrl    String?
  color       String?
  shape       String?
  frequency   String // "daily", "twice_daily", "weekly", etc.
  times       String   // "08:00,20:00" - comma separated times
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  emergencyAlerts EmergencyAlert[]

  // Relationships
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicationLogs  MedicationLog[]
  reminders       Reminder[]

  @@map("medications")
}

model MedicationLog {
  id           String    @id @default(cuid())
  takenAt      DateTime?
  scheduledFor DateTime
  status       LogStatus @default(PENDING)
  notes        String?
  createdAt    DateTime  @default(now())

  // Only keep medication relationship, remove user for now
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("medication_logs")
}

model Reminder {
  id           String        @id @default(cuid())
  scheduledFor DateTime
  type         ReminderType  @default(NOTIFICATION)
  status       ReminderStatus @default(PENDING)
  message      String?
  createdAt    DateTime      @default(now())

  // Relationships
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Caregiver {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  caregiverId String
  patientId   String
  caregiver   User   @relation("CaregiverPatients", fields: [caregiverId], references: [id], onDelete: Cascade)
  patient     User   @relation("SeniorCaregivers", fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([caregiverId, patientId])
  @@map("caregivers")
}

model FamilyMember {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  relationship String
  role      String   @default("secondary")
  timezone  String   @default("Asia/Kolkata")
  isEmergencyContact Boolean @default(false)
  notificationPreferences String @default("{\"daily_summary\": true, \"missed_medication\": true, \"emergency_only\": false, \"preferred_method\": \"both\"}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seniorId  String?
  senior    User?   @relation("FamilyMembers", fields: [seniorId], references: [id])

  @@map("family_members")
}

model EmergencyAlert {
  id              String    @id @default(cuid())
  medicationId    String
  alertType       String    @default("missed_dose")
  severity        String    @default("medium")
  message         String
  escalationLevel Int       @default(1)
  status          String    @default("active")
  createdAt       DateTime  @default(now())
  resolvedAt      DateTime?
  
  medication      Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("emergency_alerts")
}

enum UserRole {
  SENIOR
  CAREGIVER
  ADMIN
}

enum LogStatus {
  PENDING
  TAKEN
  MISSED
  SKIPPED
}

enum ReminderType {
  NOTIFICATION
  EMAIL
  SMS
}

enum ReminderStatus {
  PENDING
  SENT
  ACKNOWLEDGED
}